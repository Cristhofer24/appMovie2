import 'package:flutter/material.dart';
import 'package:video_player/video_player.dart';

class Multimedia extends StatefulWidget {
  final String videoUrl;

  const Multimedia({super.key, required this.videoUrl});

  @override
  State<Multimedia> createState() => _MultimediaState();
}

class _MultimediaState extends State<Multimedia> {
  late VideoPlayerController _controller;
  bool _isPlaying = false;
  double _seekValue = 0.0; // Para manejar el progreso del slider

  @override
  void initState() {
    super.initState();

    // Inicializa el controlador de video
    _controller = VideoPlayerController.network(widget.videoUrl)
      ..initialize().then((_) {
        setState(() {}); // Actualiza la UI cuando el video esté listo
        _controller.play(); // Reproduce automáticamente el video
        _isPlaying = true;
      }).catchError((error) {
        print("Error al cargar el video: $error");
        // Muestra un mensaje si hay un error al cargar el video
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text("Error al cargar el video. Verifique la URL."),
          ),
        );
      });

    // Listener para manejar el progreso del video
    _controller.addListener(() {
      setState(() {
        _seekValue = _controller.value.position.inSeconds.toDouble();
      });
    });
  }

  @override
  void dispose() {
    _controller.dispose(); // Libera los recursos del controlador
    super.dispose();
  }

  void _togglePlayPause() {
    setState(() {
      if (_controller.value.isPlaying) {
        _controller.pause();
        _isPlaying = false;
      } else {
        _controller.play();
        _isPlaying = true;
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("Reproductor de Video"),
        centerTitle: true,
      ),
      body: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          // Vista previa del video
          Center(
            child: _controller.value.isInitialized
                ? AspectRatio(
                    aspectRatio: _controller.value.aspectRatio,
                    child: VideoPlayer(_controller),
                  )
                : _controller.value.hasError
                    ? Text(
                        "Error al reproducir el video: ${_controller.value.errorDescription}",
                        style: const TextStyle(color: Colors.red),
                      )
                    : const CircularProgressIndicator(),
          ),

          // Barra de progreso y controles
          if (_controller.value.isInitialized)
            Column(
              children: [
                Slider(
                  min: 0.0,
                  max: _controller.value.duration.inSeconds.toDouble(),
                  value: _seekValue,
                  onChanged: (value) {
                    setState(() {
                      _seekValue = value;
                      _controller.seekTo(Duration(seconds: value.toInt()));
                    });
                  },
                ),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    IconButton(
                      icon: Icon(_isPlaying ? Icons.pause : Icons.play_arrow),
                      onPressed: _togglePlayPause,
                    ),
                    Text(
                      "${_controller.value.position.inMinutes}:${(_controller.value.position.inSeconds % 60).toString().padLeft(2, '0')} / ${_controller.value.duration.inMinutes}:${(_controller.value.duration.inSeconds % 60).toString().padLeft(2, '0')}",
                    ),
                  ],
                ),
              ],
            ),
        ],
      ),
    );
  }
}
